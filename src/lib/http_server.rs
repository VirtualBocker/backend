use crate::lib::config;

use std::{
    collections::HashMap,
    io::{BufRead, BufReader, Write},
    net::TcpListener,
};

use crate::lib::{
    logger::Logger,
    parse_funcs::{deser_response, parse_request},
    req_res_structs::{Method, Response},
    request::Request,
    server_errors::ServerError,
};

type HandlerFn = fn(&Request) -> Response;
// –¢–æ –µ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, handle_home(req) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ Request –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Response.

const BAD_REQUEST_RESPONSE: Response = Response {
    response_code: 404,
    headers: None,
    body: None,
};

const NOT_FOUND_RESPONSE: Response = Response {
    response_code: 404,
    headers: None,
    body: None,
};

#[derive(Debug)]
pub struct Server {
    listener: TcpListener,
    handlers: HashMap<Method, HashMap<&'static str, HandlerFn>>,
    pub log: Logger,
    pub config: config::Config
}

/*
handlers                          // HashMap<Method, ‚Ä¶>
‚îÇ
‚îú‚îÄ‚îÄ Method::GET ‚îÄ‚îÄ‚îê               // 1‚Äë–π —É—Ä–æ–≤–µ–Ω—å
‚îÇ                 ‚îÇ
‚îÇ   +---------------------------+  // 2‚Äë–π —É—Ä–æ–≤–µ–Ω—å (HashMap<String, HandlerFn>)
‚îÇ   |  "/home"    ‚Üí handle_home |
‚îÇ   |  "/about"   ‚Üí handle_about|
‚îÇ   |  "/contact" ‚Üí handle_contact
‚îÇ   +---------------------------+
‚îÇ
‚îú‚îÄ‚îÄ Method::POST ‚îÄ‚îê
‚îÇ                 ‚îÇ
‚îÇ   +---------------------------+
‚îÇ   | "/submit"   ‚Üí handle_submit
‚îÇ   +---------------------------+
‚îÇ
‚îú‚îÄ‚îÄ Method::PUT  ‚îÄ‚îê
‚îÇ                 ‚îÇ
‚îÇ   +---------------------------+
‚îÇ   | "/api/user" ‚Üí handle_put_user
‚îÇ   +---------------------------+
‚îÇ
‚îî‚îÄ‚îÄ Method::DELETE ‚îÄ‚îê
                  ‚îÇ
    +---------------------------+
    | "/api/user" ‚Üí handle_del_user
    +---------------------------+

*/


impl Server {
    pub fn with_config(config: config::Config) -> Result<Server, ServerError> {
        let log = Logger::with_config(&config);

        let addr = "127.0.0.1:".to_string() + &config.port;

        let listener = TcpListener::bind(addr.clone())
            .map_err(|e| ServerError::InitError(format!("Failed to init TCP listener: {e}")))?;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à—É Hash-map —Ç–∞–±–ª–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å handlers –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π
        let mut handlers: HashMap<Method, HashMap<&str, HandlerFn>> = HashMap::new();

        handlers.insert(Method::GET, HashMap::new());
        handlers.insert(Method::POST, HashMap::new());
        handlers.insert(Method::PUT, HashMap::new());
        handlers.insert(Method::DELETE, HashMap::new());
        handlers.insert(Method::OTHER, HashMap::new());


        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—à –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞
        Ok(Self {
            listener,
            handlers,
            log,
            config: config::Config {
                port : addr,
                ..config
            }
        })
    }

    // –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
    pub fn new(addr: &str) -> Result<Server, ServerError> {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–∞—à —Å–µ—Ä–≤–∞–∫ –Ω–∞ –∞–¥—Ä–µ—Å "addr", —á—Ç–æ–±—ã –æ–Ω —Å—á–∏—Ç—ã–≤–∞–ª
        // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ –Ω–µ–≥–æ
        // –ù–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ "addr" –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è —á–µ–º-—Ç–æ —Ç–∏–ø–∞ "127.0.0.1:8080", —Ç–æ
        // 127.0.0.1 - –∞–π–ø–∏ –º–∞—à–∏–Ω—ã, –∞ 8080 - –ø–æ—Ä—Ç –ø—Ä–æ—Å–ª—É—à–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        let log = Logger::default();
        
        let listener = TcpListener::bind(addr)
            .map_err(|e| ServerError::InitError(format!("Failed to init TCP listener: {e}")))?;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à—É Hash-map —Ç–∞–±–ª–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å handlers –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π
        let mut handlers: HashMap<Method, HashMap<&str, HandlerFn>> = HashMap::new();

        handlers.insert(Method::GET, HashMap::new());
        handlers.insert(Method::POST, HashMap::new());
        handlers.insert(Method::PUT, HashMap::new());
        handlers.insert(Method::DELETE, HashMap::new());
        handlers.insert(Method::OTHER, HashMap::new());


        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—à –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞
        Ok(Self {
            listener,
            handlers,
            log,
            config:config::Config::default()
        })
    }

    pub fn add_handler(
        &mut self,
        method: Method,
        path: &'static str,
        handler: HandlerFn,
    ) -> Result<(), ServerError> {
        let paths: &mut HashMap<&str, HandlerFn> = self.handlers.get_mut(&method).unwrap(); // –ü–æ–ª—É—á–∞–µ–º Hash-map —Ç–∞–±–ª–∏—Ü—É —Å –ø—É—Ç—è–º–∏ –∏ handlers
        if paths.contains_key(&path) {
            // –≤ Hash-map —Ç–∞–±–ª–∏—Ü–µ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—É—Ç—å? –ª–æ–≤–∏ –æ—à–∏–±–∫—É
            self.log.info(&format!(
                "{method} handler with path '{path}' already registered!"
            ));
            return Err(ServerError::HandlerError(format!(
                "{method} handler with path '{path}' already registered!"
            )));
        }

        paths.insert(path, handler); // –¥–æ–±–∞–≤–ª—è–µ–º handler –≤ Hash-map —Ç–∞–±–ª–∏—Ü—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
        self.log
            .info(&format!("üìå Handler registered: {method} {path}"));
        Ok(())
    }

    #[allow(non_snake_case)]
    pub fn GET(&mut self, path: &'static str, handler: HandlerFn) {
        self.add_handler(Method::GET, path, handler).unwrap()
    }

    #[allow(non_snake_case)]
    pub fn POST(&mut self, path: &'static str, handler: HandlerFn) {
        self.add_handler(Method::POST, path, handler).unwrap()
    }

    #[allow(non_snake_case)]
    pub fn PUT(&mut self, path: &'static str, handler: HandlerFn) {
        self.add_handler(Method::PUT, path, handler).unwrap()
    }

    #[allow(non_snake_case)]
    pub fn DELETE(&mut self, path: &'static str, handler: HandlerFn) {
        self.add_handler(Method::DELETE, path, handler).unwrap()
    }

    /*
    –ü—É—Å—Ç—å —É Hash-map —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å –æ–±—ä–µ–º –≤ 8 –µ–¥–µ–Ω–∏–Ω–∏—Ü, —Ç.–µ.
    InnerMap (capacity = 8):

    Index  0 ‚îÇ  []
    Index  1 ‚îÇ  []
    Index  2 ‚îÇ  []
    Index  3 ‚îÇ  []
    Index  4 ‚îÇ  []
    Index  5 ‚îÇ  []
    Index  6 ‚îÇ  []
    Index  7 ‚îÇ  []

    ‚Ññ1.–í—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π GET
    server.GET("/home".to_sting(), handler_home)?;

    1. –í—ã—á–∏—Å–ª—è–µ–º hash("/home"). –ü—É—Å—Ç—å –ø–æ–ª—É—á–∏–ª–æ—Å—å h = 11.
    2. –ë–µ—Ä—ë–º bucket_idx = h % 8 = 11 % 8 = 3.
    3. –ò–¥—ë–º –≤ –±–∞–∫–µ—Ç –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º 3 –∏ –∫–ª–∞–¥—ë–º —Ç—É–¥–∞ –ø–∞—Ä—É ("/home", handler_home).

    Index  0 ‚îÇ  []
    Index  1 ‚îÇ  []
    Index  2 ‚îÇ  []
    Index  3 ‚îÇ  [ ("/home", handler_home) ]
    Index  4 ‚îÇ  []
    Index  5 ‚îÇ  []
    Index  6 ‚îÇ  []
    Index  7 ‚îÇ  []

    ‚Ññ2. –í—Å—Ç–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π GET
    server.GET("/about".to_sting(), handler_about)?;

    1. –í—ã—á–∏—Å–ª—è–µ–º hash("/about"). –ü—É—Å—Ç—å –ø–æ–ª—É—á–∏–ª–æ—Å—å h = 1.
    2. –ë–µ—Ä—ë–º bucket_idx = h % 8 = 1 % 8 = 1.
    3. –ò–¥—ë–º –≤ –±–∞–∫–µ—Ç –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º 1 –∏ –∫–ª–∞–¥—ë–º —Ç—É–¥–∞ –ø–∞—Ä—É ("/about", handler_about).

    Index  0 ‚îÇ  []
    Index  1 ‚îÇ  [ ("/about", handler_about) ]
    Index  2 ‚îÇ  []
    Index  3 ‚îÇ  [ ("/home", handler_home) ]
    Index  4 ‚îÇ  []
    Index  5 ‚îÇ  []
    Index  6 ‚îÇ  []
    Index  7 ‚îÇ  []

    ‚Ññ3. –í—Å—Ç–∞–≤–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π GET
    server.GET("/contact".into(), handler_contact)?;

    1. –í—ã—á–∏—Å–ª—è–µ–º hash("/about"). –ü—É—Å—Ç—å –ø–æ–ª—É—á–∏–ª–æ—Å—å h = 3.
    2. –ë–µ—Ä—ë–º bucket_idx = h % 8 = 3 % 8 = 1.
    3. –ò–¥—ë–º –≤ –±–∞–∫–µ—Ç –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º 3 –∏ –∫–ª–∞–¥—ë–º —Ç—É–¥–∞ –ø–∞—Ä—É ("/about", handler_about). –ù–æ —Å –∫–æ–ª–ª–∏–∑–∏–µ–π

    Index  0 ‚îÇ  []
    Index  1 ‚îÇ  [ ("/about",   handler_about) ]
    Index  2 ‚îÇ  []
    Index  3 ‚îÇ  [ ("/home",    handler_home)
            ‚îî‚îÄ ("/contact", handler_contact) ]
    Index  4 ‚îÇ  []
    Index  4 ‚îÇ  []
    Index  5 ‚îÇ  []
    Index  6 ‚îÇ  []
    Index  7 ‚îÇ  []

    –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Hash-map —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ 90% –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: 8 -> 16
    + –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ä–µ—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.


    New InnerMap (capacity = 16):

    Index  0 ‚îÇ  []
    Index  1 ‚îÇ  [ ("/about",   handler_about) ]
    Index  2 ‚îÇ  []
    Index  3 ‚îÇ  [ ("/contact", handler_contact) ]
    Index  4 ‚îÇ  []
    ‚Ä¶
    Index 11 ‚îÇ  [ ("/home",    handler_home) ]
    ‚Ä¶
    Index 15 ‚îÇ  []
     */

    /*
    // –î–æ–±–∞–≤–ª—è–µ—Ç GET handler –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ path
    #[allow(non_snake_case)]
    pub fn GET(&mut self, path: String, handler: HandlerFn) -> Result<(), ServerError> {
        let paths: &mut HashMap<String, fn(Request) -> Response> = self.handlers.get_mut(&Method::GET).unwrap(); // –ü–æ–ª—É—á–∞–µ–º Hash-map —Ç–∞–±–ª–∏—Ü—É —Å –ø—É—Ç—è–º–∏ –∏ handlers
        if paths.contains_key(&path) {
            // –≤ Hash-map —Ç–∞–±–ª–∏—Ü–µ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—É—Ç—å? –ª–æ–≤–∏ –æ—à–∏–±–∫—É
            return Err(ServerError::HandlerError(format!(
                "GET handler with path '{path}' already registered!"
            )));
        }

        paths.insert(path, handler); // –¥–æ–±–∞–≤–ª—è–µ–º handler –≤ Hash-map —Ç–∞–±–ª–∏—Ü—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏

        Ok(())
    }

    // –î–æ–±–∞–≤–ª—è–µ—Ç POST handler –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ path
    #[allow(non_snake_case)]
    pub fn POST(&mut self, path: String, handler: HandlerFn) -> Result<(), ServerError>{
        let paths: &mut HashMap<String, fn(Request) -> Response> = self.handlers.get_mut(&Method::GET).unwrap(); // –ü–æ–ª—É—á–∞–µ–º Hash-map —Ç–∞–±–ª–∏—Ü—É —Å –ø—É—Ç—è–º–∏ –∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏
        if paths.contains_key(&path) {
            // –≤ Hash-map —Ç–∞–±–ª–∏—Ü–µ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—É—Ç—å? –ª–æ–≤–∏ –æ—à–∏–±–∫—É
            return Err(ServerError::HandlerError(format!(
                "POST handler with path '{path}' already registered!"
            )));
        }

        paths.insert(path, handler); // –¥–æ–±–∞–≤–ª—è–µ–º handler –≤ Hash-map —Ç–∞–±–ª–∏—Ü—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏

        Ok(())
    }

    // –î–æ–±–∞–≤–ª—è–µ—Ç PUT handler –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ path
    #[allow(non_snake_case)]
    pub fn PUT(&mut self, path: String, handler: HandlerFn) -> Result<(),ServerError> {
        let paths: &mut HashMap<String, fn(Request) -> Response> = self.handlers.get_mut(&Method::GET).unwrap(); // –ü–æ–ª—É—á–∞–µ–º Hash-map —Ç–∞–±–ª–∏—Ü—É —Å –ø—É—Ç—è–º–∏ –∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏
        if paths.contains_key(&path) {
            // –≤ Hash-map —Ç–∞–±–ª–∏—Ü–µ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—É—Ç—å? –ª–æ–≤–∏ –æ—à–∏–±–∫—É
            return Err(ServerError::HandlerError(format!(
                "PUT handler with path '{path}' already registered!"
            )));
        }

        paths.insert(path, handler); // –¥–æ–±–∞–≤–ª—è–µ–º handler –≤ Hash-map —Ç–∞–±–ª–∏—Ü—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏

        Ok(())
    }

    // –î–æ–±–∞–≤–ª—è–µ—Ç DELETE handler –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ path
    #[allow(non_snake_case)]
    pub fn DELETE(&mut self, path: String, handler: HandlerFn) -> Result<(),ServerError> {
        let paths: &mut HashMap<String, fn(Request) -> Response> = self.handlers.get_mut(&Method::GET).unwrap(); // –ü–æ–ª—É—á–∞–µ–º Hash-map —Ç–∞–±–ª–∏—Ü—É —Å –ø—É—Ç—è–º–∏ –∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏
        if paths.contains_key(&path) {
            // –≤ Hash-map —Ç–∞–±–ª–∏—Ü–µ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—É—Ç—å? –ª–æ–≤–∏ –æ—à–∏–±–∫—É
            return Err(ServerError::HandlerError(format!(
                "DELETE handler with path '{path}' already registered!"
            )));
        }

        paths.insert(path, handler); // –¥–æ–±–∞–≤–ª—è–µ–º handler –≤ Hash-map —Ç–∞–±–ª–∏—Ü—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏

        Ok(())
    }
     */
    // –ü–û–ö–ê –ù–ò –ù–ê–î–ê
    // pub fn middleware<F>(&mut self, middleware: F)
    // where F: Fn(Request) -> Option<Request> {
    //     todo!()
    // }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    // –ü–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É:
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–µ—Å—Ç
    // 2. –ü–∞—Ä—Å–∏–º –µ–≥–æ
    // 3. –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É —Ä–µ—Å–ø–æ–Ω—Å —Å –∫–æ–¥–æ–º 403.
    //    –ò–Ω–∞—á–µ
    // 4. –£–∑–Ω–∞—ë–º –ø—É—Ç—å –∏ –º–µ—Ç–æ–¥
    // 5. –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π —Ä–µ–∫–≤–µ—Å—Ç
    // 6. –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å–ø–æ–Ω—Å –æ—Ç –Ω–∞—à–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Å–ø–æ–Ω—Å –∫–ª–∏–µ–Ω—Ç—É
    // 8. ???
    // 9. PROFIT!!!
    pub fn start(&self) {
        self.log.motd();
        self.log.info(&"Server started".to_string());

        // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º—É –∏—Ç–µ—Ä–∞—Ç–æ—Ä—É –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        // –ü–æ—á–µ–º—É –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π? –ü–æ—Ç–æ–º—É-—á—Ç–æ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è,
        // –û–Ω –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        for stream in self.listener.incoming() {
            match stream {
                Ok(mut stream) => {
                    // –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∫–∞–π—Ñ—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Ç–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    let bufreader = BufReader::new(&stream); // —Å–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å –∏–∑ –Ω–∞—à–µ–≥–æ TCP –ø–æ—Ç–æ–∫–∞

                    /*
                    cap -- —Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç —Å–µ–π—á–∞—Å –ª–µ–∂–∏—Ç –≤ –±—É—Ñ–µ—Ä–µ
                    pos -- –∫–∞—Ä—Ç–µ–∫–∞, –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞–π—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

                    BufReader<R> —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:

                    1. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏–¥–µ—Ä (inner: R)
                    2. –ë—É—Ñ–µ—Ä (buf: Vec<u8>)
                    3. –ò–Ω–¥–µ–∫—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è (pos: usize –∏ cap: usize)

                    –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏–¥–µ—Ä -- —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ï—Å–ª–∏ –≤ –±—É—Ñ–µ—Ä–µ –ø—É—Å—Ç–æ, —Ç–æ–≥–¥–∞ cap = 0, –∞ pos = 0. –¢.–∫. pos>=cap , —è –∑–∞–ø—Ä–æ—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–∏–¥–µ—Ä–∞. –ü—Ä–∏ —ç—Ç–æ–º –æ–Ω –æ—Ü–µ–Ω–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –∏ —ç—Ç–æ –±—É–¥–µ—Ç –º–æ—ë –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ cap (—Ç.–µ. —è –º–æ–≥—É –Ω–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–µ—Å—å –±—É—Ñ–µ—Ä)

                    –ö–∞—Ä–µ—Ç–∫–æ–π —è –±—É–¥—É —Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤–Ω–æ–≤—å –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è pos>=cap.
                    BufReader
                    ‚îú‚îÄ inner: TcpStream { ‚Ä¶ }
                    ‚îú‚îÄ buf: Vec<u8> (capacity 8192)
                    ‚îî‚îÄ [raw]: (pos: 0, cap: 0)*/
                    let raw_request: String = bufreader
                        .lines() // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏–∑ –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è (—Ä–∏–¥–µ—Ä–∞)
                        // –∏—Ç–µ—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ Result<String, std::io::Error>
                        // —É–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª /n. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∏–º –±—ã–ª /r —Ç–æ–∂–µ —É–¥–∞–ª—è–µ—Ç
                        .map(|result| result.unwrap() + "\r\n") // –∫—Ä–∞—Ç–∫–æ: –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ ("\r\n")
                        /* –ø–æ–¥—Ä–æ–±–Ω–æ: result.unwrap() –∏–∑–≤–ª–µ–∫–∞–µ—Ç String –∏–∑ Ok(String) –∏–ª–∏ –ª–æ–º–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª Error
                        —Ç.–µ. —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ + –¥–æ–±–∞–≤–ª—è–µ–º \r\n, —Ç.–∫. .lines —É–±–∏—Ä–∞–µ—Ç \r\n
                        –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ .map –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
                        –ò—Å—Ö–æ–¥–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –±—ã–ª: Iterator<Item = Result<String, std::io::Error>>
                        –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å—Ç–∞–ª: Iterator<Item = String> */
                        .take_while(|line| !line.trim_end().is_empty()) // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                        // —Ç.–µ. –±–µ—Ä–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–∫–∞ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —Ç.–µ. CRLF-—Å—Ç—Ä–æ–∫—É –≤ raw-HTTP request (—Ç.–µ. –ø–æ–∫–∞ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–º \r\n, –∫–æ—Ç–æ—Ä–∞—è –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
                        // take_while –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ "". –°–∞–º–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç
                        // + .take_while –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏
                        .collect(); // –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ —Ç–∏–ø String
                    // —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–∫–µ–∏–≤–∞–µ—Ç –∏—Ö –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ (String, —Ç.–∫. –º—ã –µ–≥–æ —è–≤–Ω–æ –∑–∞–¥–∞–ª–∏ –ø—Ä–∏ let raw_request: String)
                    // —É –Ω–∞—Å –æ—Å—Ç–∞—ë—Ç—Å—è \r\n –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏, —Ç.–∫. –º—ã –≤–µ—Ä–Ω—É–ª–∏ —ç—Ç—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ map, –∞ .take_while –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏
                    // println!("{}",raw_request);
                    match parse_request(raw_request) {
                        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                        Ok(mut request) => {
                            let mut found_path = false;

                            for (key, value) in self.handlers.get(&request.method).unwrap() {
                                if request.is_similar(key) {
                                    request.parse_args(key);

                                    let response = value(&request);

                                    self.log.info(&format!(
                                        "Handler triggered for route: {} {}",
                                        request.method, request.path
                                    ));

                                    let deserialized_response = deser_response(response);

                                    let _ = stream.write_all(deserialized_response.as_bytes());
                                    found_path = true;
                                    break;
                                }
                            }

                            if !found_path {
                                let _ =
                                    stream.write_all(deser_response(NOT_FOUND_RESPONSE).as_bytes());
                            }
                        }
                        Err(e) => {
                            self.log.debug(&format!("Server error: {e}"));
                            let _ =
                                stream.write_all(deser_response(BAD_REQUEST_RESPONSE).as_bytes());
                        }
                    }
                }
                Err(e) => {
                    self.log
                        .warn(&format!("Failed to establish connection: {e}")); // :)
                }
            }
        }
    }
}
